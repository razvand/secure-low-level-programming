#!/bin/bash
#
# This script is run as a Git post-receive hook (i.e. after a push)
# It publishes lab skeleton files, solutions until $chap_last_visible
# and slides.
# All files are actually visible/published except that solutions from
# $chap_last_visible are chmod-ed to 700 such that web access is
# disabled.
#
# NO configuration (or changes for that matter) should be done here.
# Use the $config file for configuration.
#
# Shamelessly copied from SO hook scripts.
#
# 2012, Razvan Deaconescu, razvan.deaconescu@cs.pub.ro
#

config=$HOME/repo.git/hooks/hooks_config

slides_subfolder="slides"
code_subfolder="code"
code_sol_subfolder="code"

# load configuration variables
source $config

# clear publish_folder
local_publish_dir="$publish_dir"
slides_publish_dir="$local_publish_dir"/"$slides_subfolder"
code_publish_dir="$local_publish_dir"/"$code_subfolder"
code_sol_publish_dir="$local_publish_dir"/"$code_sol_subfolder"

echo -n "   * Cleaning up publish folders ... "
test -d $slides_publish_dir || mkdir -p "$slides_publish_dir"
test -d $code_publish_dir || mkdir -p "$code_publish_dir"
test -d $code_sol_publish_dir || mkdir -p "$code_sol_publish_dir"
rm -fr "$slides_publish_dir"/*
rm -fr "$code_publish_dir"/*
rm -fr "$code_sol_publish_dir"/*
echo "done"

umask 077

# archive skeleton files and solutions
echo -n "   * Creating archives for skeleton files and solutions ... "
for index in $(seq -f %02g $chap_first $chap_last); do
        git archive --format=zip --prefix=$prefix-$index-code/ HEAD:$prefix-$index/code/ > $code_publish_dir/$prefix-$index-code.zip
        git archive --format=zip --prefix=$prefix-$index-code-sol/ HEAD:$prefix-$index/code-sol/ > $code_sol_publish_dir/$prefix-$index-code-sol.zip
done
echo "done"

echo -n "   * Configuring access rights for published lab archives ... "
chmod a+r $code_publish_dir/$prefix*-code.zip

# set visible solutions
for index in $(seq -f %02g $chap_first $chap_last_visible); do
        chmod a+r $code_sol_publish_dir/$prefix-$index-code-sol.zip
done
echo "done"

umask 022

# clean temporary folder
test -d $slides_tmp || rm -fr $slides_tmp/*
test -d $slides_tmp || mkdir $slides_tmp
test -d $slides_tmp/slides/ || mkdir -p $slides_tmp/slides/

echo -n "   * Creating local copy of slides folders ... "
for index in $(seq -f %02g $chap_first $chap_last); do
        git archive --format=tar --prefix=$prefix-$index-slides/ HEAD:$prefix-$index/slides/ | (cd $slides_tmp/slides && tar xf -)
done
git archive --format=tar --prefix=sty/ HEAD:sty/ | (cd $slides_tmp && tar xf -)
git archive --format=tar --prefix=metafiles/ HEAD:metafiles/ | (cd $slides_tmp && tar xf -)
echo "done"

echo -n "   * Running slides build and publish script ... "
slides_build_publish $slides_tmp/slides/ $slides_publish_dir > $slides_tmp/slides_build_publish.err 2>&1
echo "done"

cat > $slides_publish_dir/README <<END
Do not publish data as files directly into this folder. All files will be
removed at each push into the repository. Create a subfolder and publish
information into that.
END
cat > $code_publish_dir/README <<END
Do not publish data as files directly into this folder. All files will be
removed at each push into the repository. Create a subfolder and publish
information into that.
END
cat > $code_sol_publish_dir/README <<END
Do not publish data as files directly into this folder. All files will be
removed at each push into the repository. Create a subfolder and publish
information into that.
END

exit 0
